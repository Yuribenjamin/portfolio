{"version":3,"sources":["assets/ibrahim.jpg","assets/fb.svg","assets/li.svg","assets/gh.svg","assets/tw.svg","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Homepage","window","open","react_default","a","createElement","Grid","Jumbotron","Button","onClick","this","url","Row","className","Col","Image","src","ibrahim","circle","xs","sm","href","rel","target","fb","li","gh","tw","Component","App","components_Homepage","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2XCkEzBC,gLAxDPC,OAAOC,KADK,uGAIZ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACAJ,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,4FAIIF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACAC,QAASC,KAAKC,KADd,WAIRR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACAC,UAAU,yBACNV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACAD,UAAU,kBACVV,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKC,IAASC,QAAM,EAACL,UAAU,gBACtCV,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,KACAQ,UAAU,OADV,4FAE6FV,EAAAC,EAAAC,cAAA,WAF7F,uEAOJF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACAC,UAAU,gCACNV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,GAChBjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,uCAAuCC,IAAI,sBAAsBC,OAAO,UAChFpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKQ,IAAIN,QAAM,EAACL,UAAU,WAGjCV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,GAChBjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,4CAA4CC,IAAI,sBAAsBC,OAAO,UACrFpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKS,IAAIP,QAAM,EAACL,UAAU,WAGjCV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,GAChBjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,kCAAkCC,IAAI,sBAAsBC,OAAO,UAC3EpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKU,IAAIR,QAAM,EAACL,UAAU,WAGjCV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKK,GAAI,EAAGC,GAAI,GAChBjB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,mCAAmCC,IAAI,sBAAsBC,OAAO,UAC5EpB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAKW,IAAIT,QAAM,EAACL,UAAU,oBAlD1Be,aCORC,0LARX,OACE1B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACyB,EAAD,cAJUF,cCQEG,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KAAelC,EAAAC,EAAAC,cAACiC,EAAD,OAAyBC,SAASC,eAAe,SD0H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2526531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ibrahim.bd85cb43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fb.fb1345db.svg\";","module.exports = __webpack_public_path__ + \"static/media/li.f5d98211.svg\";","module.exports = __webpack_public_path__ + \"static/media/gh.2cd944d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/tw.d10e5a23.svg\";","import React, { Component } from 'react';\nimport { Grid, Jumbotron, Button, Row, Col, Image } from 'react-bootstrap'\nimport ibrahim from '../assets/ibrahim.jpg'\nimport fb from '../assets/fb.svg'\nimport li from '../assets/li.svg'\nimport gh from '../assets/gh.svg'\nimport tw from '../assets/tw.svg'\nclass Homepage extends Component {\n\n    url () {\n        const url='https://www.slideshare.net/slideshow/embed_code/key/lI4ocPTFPzNxVe';\n        window.open(url);\n    }\n    render() {\n        return(\n            <Grid>\n                <Jumbotron>\n                <h1>Welcome</h1>\n                <p>\n                This is Abraham Ragab Homepage,\n                I'm a Former Lawyer and Front-End Web Developer\n                </p>\n                    <Button\n                    onClick={this.url}\n                    >Resume</Button>\n            </Jumbotron>\n            <Row\n            className='show-grid text-center'>\n                <Col\n                className='person-wrapper'>\n                <Image src={ibrahim} circle className='profile-pic'/>\n                <h3>Abraham Ragab</h3>\n                <p\n                className='des'>\n                    Self-motivated web developer with a high level of experience working on multiple projects<br/>\n                    Passionate and hard working with a penchant for meeting deadlines\n                </p>\n                </Col>\n            </Row>\n            <Row\n            className='show-grid text-center footer'>\n                <Col xs={3} sm={3}>\n                <a href='https://facebook.com/Ibrhim.Moustafa' rel=\"noopener noreferrer\" target='_blank'>\n                <Image src={fb} circle className='icon'/>\n                </a>\n                </Col>\n                <Col xs={3} sm={3}>\n                <a href='https://www.linkedin.com/in/abrahamragab/' rel=\"noopener noreferrer\" target='_blank'>\n                <Image src={li} circle className='icon'/>\n                </a>\n                </Col>\n                <Col xs={3} sm={3}>\n                <a href='https://github.com/Yuribenjamin' rel=\"noopener noreferrer\" target='_blank'>\n                <Image src={gh} circle className='icon'/>\n                </a>\n                </Col>\n                <Col xs={3} sm={3}>\n                <a href='https://twitter.com/AbrahamRagab' rel=\"noopener noreferrer\" target='_blank'>\n                <Image src={tw} circle className='icon'/>\n                </a>\n                </Col>\n            </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default Homepage","import React, { Component } from 'react';\nimport Homepage from './components/Homepage'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App' >\n        <Homepage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}